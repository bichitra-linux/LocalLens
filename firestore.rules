// Firestore Security Rules for LocalLens
// Copy these rules to your Firebase Console

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only read/write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null; // Others can read basic user info
    }
    
    // Notes are publicly readable but only owners can modify
    match /notes/{noteId} {
      allow read: if request.auth != null && resource.data.isActive == true;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId
        && validateNoteData(request.resource.data);
      allow update: if request.auth != null 
        && request.auth.uid == resource.data.userId
        && validateNoteUpdate(request.resource.data, resource.data);
      allow delete: if request.auth != null 
        && request.auth.uid == resource.data.userId;
    }
    
    // Votes - users can only vote once per note
    match /votes/{voteId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId
        && validateVoteData(request.resource.data);
      allow update, delete: if request.auth != null 
        && request.auth.uid == resource.data.userId;
    }
    
    // Comments - publicly readable, authenticated users can create
    match /comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId
        && validateCommentData(request.resource.data);
      allow update, delete: if request.auth != null 
        && request.auth.uid == resource.data.userId;
    }
    
    // Helper functions
    function validateNoteData(data) {
      return data.keys().hasAll(['content', 'latitude', 'longitude', 'geohash', 'userId', 'createdAt', 'expiresAt'])
        && data.content is string 
        && data.content.size() <= 500
        && data.latitude is number
        && data.longitude is number
        && data.latitude >= -90 && data.latitude <= 90
        && data.longitude >= -180 && data.longitude <= 180
        && data.geohash is string
        && data.userId is string
        && data.isActive == true;
    }
    
    function validateNoteUpdate(newData, currentData) {
      return newData.userId == currentData.userId
        && newData.location == currentData.location  // Cannot change location
        && (newData.content is string && newData.content.size() <= 500);
    }
    
    function validateVoteData(data) {
      return data.keys().hasAll(['userId', 'noteId', 'type', 'createdAt'])
        && data.userId is string
        && data.noteId is string
        && data.type in ['up', 'down']
        && data.createdAt is timestamp;
    }
    
    function validateCommentData(data) {
      return data.keys().hasAll(['userId', 'noteId', 'content', 'createdAt'])
        && data.userId is string
        && data.noteId is string
        && data.content is string
        && data.content.size() <= 280
        && data.createdAt is timestamp;
    }
  }
}